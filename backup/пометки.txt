Конструкции jinja2

    - {%%} - спецификатор шаблона
    - {{}} - выражение для вставки конструкций Python в шаблон
    - {##} - блок коммментариев
    - # ## - Строковый комментарий

Экранирование:
    - {%raw%} ... {%endraw%} - всё что помещается внутрь этого блока никаким образом не будет преобразованно.
    - <a href="#">Ссылка</a> -> В html документе определяется как тег.
        Для того чтобы экранировать такие символы есть спецальная конструкция.

                        e - escape()
    Выражение for
    - {%for <выражение> -%}
        <"Повторяющийся фрагмент">
      {% endfor %}
    Выражение if
    - {%if <условие>%}
        <команда>
      {% endif %}
    Выражение elif
    - {%elif <выражение> -%}  #Знак " - " убирает \n между строками при выводе
    Закрываются {% endif %}

Фильтры и макросы:
    - sum - вычисление суммы коллекции по атрибуту

    Для пременения фильтров внутри шаблона используется специальный блок filter

   - {%filter<название фильтра>%}
      <фрагмент применения фильтра>
      {%endfilter%}

Загрузчики. Конструкции include, import
   - {% icnlude <Путь до шаблона> %}
   - {% include ['<путь до шаблона №1>','<Путь до шаблона №2>']%}

   Отличие import от include состоит в том что при им порте фал не добавляется н опри этом мы можем использовать
   функционал этого файло. Обычно это используется в случае когад в файлах есть макросы
   - {%import <>%}


Шаги реализации RSA подписи обычно включают в себя:

Генерация ключей: генерация пары закрытого и открытого ключа RSA. Закрытый ключ должен быть храниться в секрете, а открытый ключ должен быть распространен для проверки подписи.

Создание сообщения: создание сообщения, которое нужно подписать. Сообщение должно быть преобразовано в битовую строку.

Хеширование сообщения: хеширование сообщения с использованием криптографической хеш-функции, например SHA-256, чтобы получить фиксированную длину хэш-значения.

Шифрование хеш-значения: зашифровать хеш-значение, используя закрытый ключ отправителя, чтобы создать подпись. Это обычно выполняется с помощью операции RSA-шифрования.

Проверка подписи: при получении сообщения получатель сначала расшифровывает подпись с помощью открытого ключа отправителя. Затем получатель вычисляет хеш-значение и сравнивает его с расшифрованным значением. Если значения совпадают, то подпись считается действительной, иначе - недействительной.

Расшифровка сообщения: если подпись действительна, то получатель может расшифровать сообщение, используя открытый ключ отправителя, который был распространен заранее.

Проверка времени: если требуется, то можно проверить время подписи, чтобы убедиться, что подпись была создана до определенного момента времени.

Ограничение повторного использования: в зависимости от конкретной реализации, подпись может быть предназначена только для одного использования, чтобы предотвратить повторное использование в будущем.